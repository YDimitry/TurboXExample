class inherited Com.Frm.SysFields "Пример интерфейса формы-редактора записи";

import Com.Def, Bas, Com.Consts;
import Def;

InClass Public

#override;
var RecordClass :Class Com.Rec.IRecord := Rec_Example;


InObject public
var FieldName synonym ИмяПоля: IEdit;
var FieldName2_ : ICheckBox;
var FieldName2 : ICheckBox;
var FieldName3 : IEdit;


InObject Private
StructSubtbl :  Rec.subTblStruct;
var fFieldName2 : IVar; -- для пробы создания локального поля

#override;
var FRecord     : Rec_Example;
var EdtRec      : Rec_Example;

--proc InitRecord;
--  inherited InitRecord;
 -- StructSubtbl = EdtRec.ExamplSubTbl.DefStruct ; -- для многозначной структуры
--end;

--proc AfterInit;
--  inherited AfterInit;
--  StructSubtbl =  nil; -- для многозначной структуры
--end;


#override;
  proc Init;
     Inherited Init;

    -- var mainFrame: IFrame = RootFrame.AddNewFrame;
     with FieldsFrame do -- Добавление нового кадра и дальнейшая работа с ним в блоке

        with addNewFrame() do
          SetColumns ([labelW, 0.9]); -- Установка ширины стоблцов фрейма
          FieldName = AddFieldEdit("Имя поля", EdtRec.FieldName);

          fFieldName2 = IVar.Create;                     -- локальная переменная без сохранения
          FieldName2_ = AddCheckBox("выбран",fFieldName2);

          FieldName2 = AddCheckBox("выбран",EdtRec.bField_1);


          var vButton = AddButton( "test button label", @ButtonTest_OnClick );
          vButton.Width = 100;
          vButton.Caption="test button caption";

          with AddFieldEdit("@Examle:Пол",EdtRec.gender) do
             CellFormat = EnumFormat;
             FillList([ " ", "@Entity:GenderMale=Мужской|1", "@Entity:GenderFemale=Женский|2" ]);
             Alignment = LeftAlign;
          end;

        end;




        var subtbl: IFrame = AddNewFrame("фрейм подтаблицы");
        with subtbl do
           --AddHeader(, "наименование подтаблицы", "", 3,[]);
            -- with AddNewFrame() do -- необязательно фрейм во фрейме
               SetColumns ([labelW, 0.9]);
               --FieldName2 = AddFieldEdit("Имя поля2", EdtRec.ExamplSubTbl.subtblField1);
               --FieldName3 = AddFieldEdit("Имя поля3", EdtRec.ExamplSubTbl.subtblField2);

               Subtable = EdtRec.ExamlSubTbl;   -- для многозначной структуры
               --Numbering = false;
               CanInsert = false;
               CanDelete = false;
               var line : Rec.subTblStruct = Subtable.DefStruct; -- для многозначной структуры
              --var line : Rec.subTblStruct = EdtRec.ExamplSubTbl; -- для немногозначной структуры
               AddFieldCol(, 60, line.subtblField1 );
               AddFieldCol(, 60, line.subtblField2 );


          -- end;
        end;
        with AddNewFrame do




        end;
     end;
  end;

  proc ButtonTest_OnClick(aSender: Com.Ctrl.IControl ;aIndex:Integer );

      var j: integer;

      for var I = 1..10 do
         j = j + 1; -- унарный оператор
      end;

      trace(J);
      --var vPos = Strings.Concat(["Add",SubStr("PropsNewLine",6)]);--Pos("Props","PropsNewLine");
     -- trace(ReplaceWithStatic("PropsClosedSwD"));
--      var vVar = self.ClassInfo.MemberByName("FieldName3") as VarInfo;
     -- vVariable.CallFunc("SetValue",fFieldName2);(fFieldName2);
     --vVariable.FuncRef(FieldName);
--      FieldName3 = FieldName;
--         var vVariable =  self.GetField("FieldName3");
--         var vVar:Variant = self.GetField("FieldName3_");
--       if vVar <>nil then
--          self.SetField("FieldName3_",FieldName);
--          dlgs.Message(FieldName3.GetValue);
         
--       end;

  -- Ассоциотивный массив
     var vAssoc = AssociativeArray.Create;
     var vIndex = "someIndex_1";
     for var I = 1..10 do
         var vInd  = vAssoc.GetValue(vIndex) as String[];
         if vInd<>nil then
--             InsertInArray(vInd,vInd.Length,"someVar_"+str(I));
             vInd.Add("someVar_"+str(I));
             vAssoc.SetValue(vIndex,vInd);

         else

            vAssoc.Add(vIndex,["someVar_"+str(I)]);
         end;
         if I=5 then
            vIndex = "someIndex_2";
           
         end;
     end;

  end;


  func ReplaceWithStatic(aPropName:String) :Integer;

      var vPropsToReplace =["PropsPrinterNumberSwD",
                            "PropsEventTimeSwD",
                            "PropsОбщСтатусSwD",
                            "PropsLockedSwD",
                            "PropsClosedSwD"];
      var vReplaceNum = [2,2,3,1,1];

      var vIndex = SearchInArray(vPropsToReplace,aPropName);
      if vIndex>0 then
          Result = vReplaceNum[vIndex];
      end;

  end;

end